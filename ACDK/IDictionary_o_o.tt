<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".tt.cs" #>

<#
	TKey_TValue_Guid[] Types = new TKey_TValue_Guid[]
	{
		new TKey_TValue_Guid("object", "object", "F65DEF09-DB98-49EA-BB85-0E80C469621F"),
		new TKey_TValue_Guid("string", "int", "62013D6F-5ADD-41F9-9482-875C762F8B51"),
	};
#>

using System;
using System.Linq;
using System.Runtime.InteropServices;

namespace ACDK
{
<#
	foreach (var type in Types)
	{
#>
    [Guid("<#=type.Guid#>")]
    [InterfaceType(ComInterfaceType.InterfaceIsDual)]
    public interface IDictionary_<#=type.TKey#>_<#=type.TValue#>
    {
        [DispId(0x2001)]
        <#=type.TValue#> this[<#=type.TKey#> key] { get; }

        [DispId(0x2002)]
        int Count { get; }

        <#=type.TKey#>[] Keys
        {
            [DispId(0x2003)]
            [return: MarshalAs(UnmanagedType.SafeArray)]
            get;
        }

        [DispId(0x2004)]
        string ToString();

        [DispId(0x2005)]
        void Load(string json);
    }

    [ComVisible(false)]
    public sealed partial class W_IDictionary_<#=type.TKey#>_<#=type.TValue#>
        : IDictionary_<#=type.TKey#>_<#=type.TValue#>
    {
        System.Collections.Generic.IDictionary<<#=type.TKey#>, <#=type.TValue#>> obj;
        public System.Collections.Generic.IDictionary<<#=type.TKey#>, <#=type.TValue#>> Object => obj;
        public W_IDictionary_<#=type.TKey#>_<#=type.TValue#>(System.Collections.Generic.IDictionary<<#=type.TKey#>, <#=type.TValue#>> obj)
        {
            this.obj = obj;
        }

        public <#=type.TValue#> this[<#=type.TKey#> key] => Object[key];

        public int Count => Object.Count;

        public <#=type.TKey#>[] Keys
        {
            [return: MarshalAs(UnmanagedType.SafeArray)]
            get
            {
                return Object.Keys.ToArray();
            }
        }

        static System.Web.Script.Serialization.JavaScriptSerializer ser = new System.Web.Script.Serialization.JavaScriptSerializer();

        public override string ToString()
        {
            return ser.Serialize(Object);
        }

        public void Load(string json)
        {
            this.obj = ser.Deserialize<System.Collections.Generic.Dictionary<<#=type.TKey#>, <#=type.TValue#>>>(json);
        }
    }
<#
	}
#>
}

<#+
	class TKey_TValue_Guid
	{
		public string TKey { get; set; }
		public string TValue { get; set; }
		public string Guid { get; set; }

		public TKey_TValue_Guid(string key, string value, string guid)
		{
			this.TKey = key;
			this.TValue = value;
			this.Guid = guid;
		}
	}
#>
