' Copyright (C) 2017  Kazuya Ujihara <ujihara.kazuya@gmail.com>
'
' This program is free software; you can redistribute it and/or
' modify it under the terms of the GNU Lesser General Public License
' as published by the Free Software Foundation; either version 2.1
' of the License, or (at your option) any later version.
' All we ask is that proper credit is given for our work, which includes
' - but is not limited to - adding the above copyright notice to the beginning
' of your source code files, and to any copyright notice that you may distribute
' with programs based on this work.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT Any WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU Lesser General Public License for more details.
'
' You should have received a copy of the GNU Lesser General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".bas.txt" #>

<#
	var bit_fingerprinters = new string[]
	{
		"CircularFingerprinter",
		"EStateFingerprinter",
		"ExtendedFingerprinter",
		"GraphOnlyFingerprinter",
		"HybridizationFingerprinter",
		"KlekotaRothFingerprinter",
		"LingoFingerprinter",
		"MACCSFingerprinter",
		"PubchemFingerprinter",
		"ShortestPathFingerprinter",
		// SignatureFingerprinter does not support IBitFingerprint
		"SubstructureFingerprinter",
	};

	var cir_fingerprinters = new string[]
	{
        "ECFP0",
        "ECFP2",
        "ECFP4",
        "ECFP6",
        "FCFP0",
        "FCFP2",
        "FCFP4",
        "FCFP6",
	};

	// Molecular QSAR descriptors
	var  molDescriptors = new string[] 
	{
		"SmallRingDescriptor",
		"FractionalPSADescriptor",
		"ZagrebIndexDescriptor",
		"XLogPDescriptor",
		"WienerNumbersDescriptor",
		"WHIMDescriptor",
		"WeightedPathDescriptor",
		"WeightDescriptor",
		"VAdjMaDescriptor",
		"VABCDescriptor",
		"TPSADescriptor",
		"RuleOfFiveDescriptor",
		"RotatableBondsCountDescriptor",
		"PetitjeanShapeIndexDescriptor",
		"PetitjeanNumberDescriptor",
		"MomentOfInertiaDescriptor",
		"MDEDescriptor",
		"MannholdLogPDescriptor",
		"LongestAliphaticChainDescriptor",
		"LengthOverBreadthDescriptor",
		"LargestPiSystemDescriptor",
		"LargestChainDescriptor",
		"KierHallSmartsDescriptor",
		"KappaShapeIndicesDescriptor",
		"HybridizationRatioDescriptor",
		"HBondDonorCountDescriptor",
		"HBondAcceptorCountDescriptor",
		"GravitationalIndexDescriptor",
		"FragmentComplexityDescriptor",
		"FMFDescriptor",
		"EccentricConnectivityIndexDescriptor",
		"CPSADescriptor",
		"ChiPathDescriptor",
		"ChiPathClusterDescriptor",
		"ChiClusterDescriptor",
		"ChiChainDescriptor",
		"CarbonTypesDescriptor",
		"BPolDescriptor",
		"BondCountDescriptor",
		"BCUTDescriptor",
		"BasicGroupCountDescriptor",
		"AutocorrelationDescriptorPolarizability",
		"AutocorrelationDescriptorMass",
		"AutocorrelationDescriptorCharge",
		"AtomCountDescriptor",
		"AromaticBondsCountDescriptor",
		"AromaticAtomsCountDescriptor",
		"APolDescriptor",
		"ALOGPDescriptor",
		"AcidicGroupCountDescriptor",
	};
#>

Option Explicit

Dim Factory As New ACDK.ObjectFactory
Dim A_SmilesParser As ACDK.SmilesParser

<#
	foreach (var text in bit_fingerprinters)
	{
#>
Dim A_<#=text#> As New <#=text#>
<#
	}
#>

<#
	foreach (var text in molDescriptors)
	{
#>
Dim A_<#=text#> As New <#=text#>
<#
	}
#>

<#
//////////////////////////////////// 
#>
Dim A_SignatureFingerprinter As New ACDK.SignatureFingerprinter
Dim A_Tanimoto As New ACDK.Tanimoto
<#
//////////////////////////////////// 
#>

Dim FingerprinterProvider As New ACDK.FingerprinterProvider
Dim MolecularDescriptorProvider As New ACDK.MolecularDescriptorProvider
Dim CircularFingerprinterProvider As New ACDK.CircularFingerprinterProvider
Dim SmilesGenerator As New ACDK.SmilesGenerator
Dim FileDialog As New ACDK.FileDialog

Public Function CDK_BitFingerprinterValue(ByVal Name As String, ByVal Smiles As String) As String
    Dim Fingerprinter As IFingerprinter
    Set Fingerprinter = FingerprinterProvider.GetFingerprinter(Name)
    Dim Val As IBitFingerprint
    Set Val = Fingerprinter.GetBitFingerprint(SmilesParser.ParseSmiles(Smiles))
    CDK_BitFingerprinterValue = FingerprinterProvider.BitFingerprintToBitString(Val)
End Function

Public Function CDK_MolecularDescriptorValue(ByVal DescriptorName As String, ByVal Smiles As String) As String
    Dim MolecularDescriptor As IMolecularDescriptor
    Set MolecularDescriptor = MolecularDescriptorProvider.GetDescriptor(DescriptorName)
    Dim Val As DescriptorValue
    Set Val = MolecularDescriptor.Calculate(SmilesParser.ParseSmiles(Smiles))
    CDK_MolecularDescriptorValue = Val.ValueAsString()
End Function

Function SmilesParser() As ACDK.SmilesParser
    If A_SmilesParser Is Nothing Then
        Set A_SmilesParser = Factory.NewSmilesParser(Factory.SilentChemObjectBuilder)
    End If
    Set SmilesParser = A_SmilesParser
End Function

<#
	foreach (var text in cir_fingerprinters)
	{
#>
Public Function CDK_<#=text#>(ByVal Smiles As String) As String
    Dim A As IAtomContainer
    Set A = SmilesParser.ParseSmiles(Smiles)
	Dim fper As ICircularFingerprinter
	Set fper = CircularFingerprinterProvider.Create<#=text#>()
    Dim V As ACDK.IBitFingerprint
    Set V = fper.GetBitFingerprint(A)
    CDK_<#=text#> = FingerprinterProvider.BitFingerprintToBitString(V)
End Function
<#
	}
#>

<#
	foreach (var text in bit_fingerprinters)
	{
#>
Public Function CDK_<#=text#>(ByVal Smiles As String) As String
    Dim A As IAtomContainer
    Set A = SmilesParser.ParseSmiles(Smiles)
    Dim V As ACDK.IBitFingerprint
    Set V = A_<#=text#>.GetBitFingerprint(A)
    CDK_<#=text#> = FingerprinterProvider.BitFingerprintToBitString(V)
End Function
<#
	}
#>

<#
	foreach (var text in molDescriptors)
	{
#>
Public Function CDK_<#=text#>(ByVal Smiles As String) As String
    Dim A As IAtomContainer
    Set A = SmilesParser.ParseSmiles(Smiles)
    Dim V As ACDK.DescriptorValue
    Set V = A_<#=text#>.Calculate(A)
    CDK_<#=text#> = V.ValueAsString()
End Function
<#
	}
#>

<#
//////////////////////////////////// 
#>

Public Function CDK_SignatureFingerprinterAsJson(ByVal Smiles As String) As String
    Dim A As IAtomContainer
    Set A = SmilesParser.ParseSmiles(Smiles)
    Dim V As ACDK.IDictionary_string_int
    Set V = A_SignatureFingerprinter.GetRawFingerprint(A)
    CDK_SignatureFingerprinterAsJson = FingerprinterProvider.RawFingerprintToString(V)
End Function

Public Function CDK_Tanimoto(ByVal FingerPrint1 As String, ByVal FingerPrint2 As String) As Double
    CDK_Tanimoto = A_Tanimoto.Calculate_String(FingerPrint1, FingerPrint2)
End Function

Public Function CDK_Tanimoto_Dictionary(ByVal Dic1 As String, ByVal Dic2 As String) As Double
    Dim D1 As IDictionary_string_int
    Set D1 = FingerprinterProvider.RawFingerprintFromString(Dic1)
    Dim D2 As IDictionary_string_int
    Set D2 = FingerprinterProvider.RawFingerprintFromString(Dic2)
    CDK_Tanimoto_Dictionary = A_Tanimoto.Calculate_Dictionary(D1, D2)
End Function

Public Sub ImportSmilesFromSDF(ByVal FileName As String)
    Dim Sheet As Object
    Set Sheet = Sheets.Add()
    
    Dim Titles As Dictionary
    Set Titles = New Dictionary

    Dim AC As Excel.Range
    Dim Y As Long
    Y = 1
    Sheet.Cells(Y, 1) = "Smiles"
    Y = Y + 1
    
    Dim Reader As New EnumerableSDFReader
    Call Reader.Open(FileName, Factory.SilentChemObjectBuilder)
    Do While True
        Dim Mol As IAtomContainer
        Set Mol = Reader.Read()
        If Mol Is Nothing Then Exit Do
        Debug.Print SmilesGenerator.Create(Mol)
        Sheet.Cells(Y, 1) = SmilesGenerator.Create(Mol)
        
        Dim Properties As IDictionary_object_object
        Set Properties = Mol.GetProperties()
        Dim Keys()
        Keys = Properties.Keys
        Dim i As Long
        For i = LBound(Keys) To UBound(Keys)
            Dim Key
            Dim Val
            Dim TitleX As Long
            Key = Keys(i)
            Val = Properties.Item(Key)
            
            If Not Titles.Exists(Key) Then
                TitleX = Titles.Count + 2
                Call Titles.Add(Key, TitleX)
                Sheet.Cells(1, TitleX) = Key
            Else
                TitleX = Titles(Key)
            End If
            
            Sheet.Cells(Y, TitleX) = Val
        Next
        
        Y = Y + 1
    Loop
End Sub

Public Sub ImportSmilesFromSDFDialog()
    Dim FileName As String
    FileName = FileDialog.OpenFile(vbNullString)
    If FileName <> vbNullString Then
        Call ImportSmilesFromSDF(FileName)
    End If
End Sub
